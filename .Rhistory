adult <- rename(adult, occupation = V7)
adult <- rename(adult, relationship = V8)
adult <- rename(adult, race = V9)
adult <- rename(adult, sex = V10)
adult <- rename(adult, capital_gain = V11)
adult <- rename(adult, capital_loss = V12)
adult <- rename(adult, hours_per_week = V13)
adult <- rename(adult, native_country = V14)
adult <- rename(adult, class = V15)
# Trim leading and trailing spaces from all character and factor columns -Oneal
adult[] = lapply(adult, function(x) if(is.character(x) | is.factor(x)) trimws(x) else x)
# Removing rows with '?' -Oneal
adult = subset(adult, !(workclass == "?" | education == "?" | occupation == "?" | native_country == "?"))
table(adult$class)
# Change class to 0 and 1
adult <- adult %>%
mutate(class = ifelse(class == '<=50K', 0, 1))
# Convert the class variable to a factor
adult$class <- as.numeric(adult$class)
table(adult$class)
# Train/Validation Split
library(caret)
set.seed(4321)
trainIndex<-createDataPartition(adult$class,p=.7,list=F)  #p: proportion of data in train
training<-adult[trainIndex,]
validate<-adult[-trainIndex,]
library(MASS)
library(caret)
library(pROC)
# LDA model
lda.model <- lda(class ~ age + education + marital_status + occupation + relationship + race + sex + hours_per_week + native_country, data = training)
# Predict the response variable for the test set
lda.predictions <- predict(lda.model, newdata = validate)$class
# Confusion Matrix
cm <- table(lda.predictions, validate$class)
cm
#Calculate the accuracy, sensitivity, specificity, prevalence, PPV, NPV, and AUROC
accuracy <- (sum(diag(cm)) / sum(cm)) * 100
sensitivity = cm[1, 1] / sum(cm[1, ])
specificity = cm[2, 2] / sum(cm[2, ])
prevalence = sum(cm[1, ]) / nrow(validate)
ppv = cm[1, 1] / sum(cm[, 1])
npv = cm[2, 2] / sum(cm[, 2])
auc <- pROC::auc(validate$class, as.numeric(lda.predictions))
# Calculate the AUROC using predicted class labels
#roc_auc <- roc(response = validate$class, predictor = lda.predictions)$auc
#Print the results
print(paste("Accuracy:", accuracy, "%"))
print(paste("Sensitivity:", sensitivity))
print(paste("Specificity:", specificity))
print(paste("Prevalence:", prevalence))
print(paste("PPV:", ppv))
print(paste("NPV:", npv))
print(paste("AUROC:", auc))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# import data
adult <- read.csv("E:/Docs/School/SMU-MSDS/Trimester 2/DS 6372 Applied Statistics/Unit 15 Project 2/adult/adult.data", header=FALSE)
# rename columns
adult <- rename(adult, age = V1)
adult <- rename(adult, workclass = V2)
adult <- rename(adult, fnlwgt = V3)
adult <- rename(adult, education = V4)
adult <- rename(adult, education_num = V5)
adult <- rename(adult, marital_status = V6)
adult <- rename(adult, occupation = V7)
adult <- rename(adult, relationship = V8)
adult <- rename(adult, race = V9)
adult <- rename(adult, sex = V10)
adult <- rename(adult, capital_gain = V11)
adult <- rename(adult, capital_loss = V12)
adult <- rename(adult, hours_per_week = V13)
adult <- rename(adult, native_country = V14)
adult <- rename(adult, class = V15)
# Trim leading and trailing spaces from all character and factor columns -Oneal
adult[] = lapply(adult, function(x) if(is.character(x) | is.factor(x)) trimws(x) else x)
# Removing rows with '?' -Oneal
adult = subset(adult, !(workclass == "?" | education == "?" | occupation == "?" | native_country == "?"))
table(adult$class)
# Change class to 0 and 1
adult <- adult %>%
mutate(class = ifelse(class == '<=50K', 0, 1))
# Convert the class variable to a factor
adult$class <- as.numeric(adult$class)
table(adult$class)
# Train/Validation Split
library(caret)
set.seed(4321)
trainIndex<-createDataPartition(adult$class,p=.7,list=F)  #p: proportion of data in train
training<-adult[trainIndex,]
validate<-adult[-trainIndex,]
library(rpart)
# Create the classification tree model
tree.model <- rpart(class ~ ., data = training)
# Predict the response variable for the validation set
tree.predictions <- predict(tree.model, newdata = validate)
# Convert the predictions to a factor
tree.predictions <- as.factor(tree.predictions)
# Confusion Matrix
cm <- table(tree.predictions, validate$class)
cm
#Calculate the accuracy, sensitivity, specificity, prevalence, PPV, NPV, and AUROC
accuracy <- (sum(diag(cm)) / sum(cm)) * 100
sensitivity = cm[1, 1] / sum(cm[1, ])
specificity = cm[2, 2] / sum(cm[2, ])
prevalence = sum(cm[1, ]) / nrow(validate)
ppv = cm[1, 1] / sum(cm[, 1])
npv = cm[2, 2] / sum(cm[, 2])
#auc <- pROC::auc(validate$class, lda.predictions)
# Calculate the AUROC using predicted class labels
#roc_auc <- roc(response = validate$class, predictor = lda.predictions)$auc
#Print the results
print(paste("Accuracy:", accuracy, "%"))
print(paste("Sensitivity:", sensitivity))
print(paste("Specificity:", specificity))
print(paste("Prevalence:", prevalence))
print(paste("PPV:", ppv))
print(paste("NPV:", npv))
#print(paste("AUROC:", auc))
#Calculate the accuracy, sensitivity, specificity, prevalence, PPV, NPV, and AUROC
accuracy <- (sum(diag(cm)) / sum(cm)) * 100
sensitivity = cm[1, 1] / sum(cm[1, ])
specificity = cm[2, 2] / sum(cm[2, ])
prevalence = sum(cm[1, ]) / nrow(validate)
ppv = cm[1, 1] / sum(cm[, 1])
npv = cm[2, 2] / sum(cm[, 2])
auc <- pROC::auc(validate$class, as.numeric(lda.predictions))
#Print the results
print(paste("Accuracy:", accuracy, "%"))
print(paste("Sensitivity:", sensitivity))
print(paste("Specificity:", specificity))
print(paste("Prevalence:", prevalence))
print(paste("PPV:", ppv))
print(paste("NPV:", npv))
print(paste("AUROC:", auc))
library(verification)
# Create the ROC curve
roc.curve(auc)
library(pROC)
# Create the ROC curve
roc <- plot.roc(auc)
library(pROC)
#Calculate the accuracy, sensitivity, specificity, prevalence, PPV, NPV, and AUROC
accuracy <- (sum(diag(cm)) / sum(cm)) * 100
sensitivity = cm[1, 1] / sum(cm[1, ])
specificity = cm[2, 2] / sum(cm[2, ])
prevalence = sum(cm[1, ]) / nrow(validate)
ppv = cm[1, 1] / sum(cm[, 1])
npv = cm[2, 2] / sum(cm[, 2])
auc <- auc(validate$class, as.numeric(lda.predictions))
#Print the results
print(paste("Accuracy:", accuracy, "%"))
print(paste("Sensitivity:", sensitivity))
print(paste("Specificity:", specificity))
print(paste("Prevalence:", prevalence))
print(paste("PPV:", ppv))
print(paste("NPV:", npv))
print(paste("AUROC:", auc))
library(pROC)
# Create the ROC curve
roc <- plot.roc(auc)
library(pROC)
#Calculate the accuracy, sensitivity, specificity, prevalence, PPV, NPV, and AUROC
accuracy <- (sum(diag(cm)) / sum(cm)) * 100
sensitivity = cm[1, 1] / sum(cm[1, ])
specificity = cm[2, 2] / sum(cm[2, ])
prevalence = sum(cm[1, ]) / nrow(validate)
ppv = cm[1, 1] / sum(cm[, 1])
npv = cm[2, 2] / sum(cm[, 2])
auc <- auc(validate$class, as.numeric(tree.predictions))
#Print the results
print(paste("Accuracy:", accuracy, "%"))
print(paste("Sensitivity:", sensitivity))
print(paste("Specificity:", specificity))
print(paste("Prevalence:", prevalence))
print(paste("PPV:", ppv))
print(paste("NPV:", npv))
print(paste("AUROC:", auc))
# Create the ROC curve
roc <- plot.roc(validate$Class, tree.predictions)
library(dplyr)
# import data
adult <- read.csv("E:/Docs/School/SMU-MSDS/Trimester 2/DS 6372 Applied Statistics/Unit 15 Project 2/adult/adult.data", header=FALSE)
# rename columns
adult <- rename(adult, age = V1)
adult <- rename(adult, workclass = V2)
adult <- rename(adult, fnlwgt = V3)
adult <- rename(adult, education = V4)
adult <- rename(adult, education_num = V5)
adult <- rename(adult, marital_status = V6)
adult <- rename(adult, occupation = V7)
adult <- rename(adult, relationship = V8)
adult <- rename(adult, race = V9)
adult <- rename(adult, sex = V10)
adult <- rename(adult, capital_gain = V11)
adult <- rename(adult, capital_loss = V12)
adult <- rename(adult, hours_per_week = V13)
adult <- rename(adult, native_country = V14)
adult <- rename(adult, class = V15)
# Trim leading and trailing spaces from all character and factor columns -Oneal
adult[] = lapply(adult, function(x) if(is.character(x) | is.factor(x)) trimws(x) else x)
# Removing rows with '?' -Oneal
adult = subset(adult, !(workclass == "?" | education == "?" | occupation == "?" | native_country == "?"))
table(adult$class)
# Change class to 0 and 1
adult <- adult %>%
mutate(class = ifelse(class == '<=50K', 0, 1))
# Convert the class variable to a factor
adult$class <- as.numeric(adult$class)
table(adult$class)
# Train/Validation Split
library(caret)
set.seed(4321)
trainIndex<-createDataPartition(adult$class,p=.7,list=F)  #p: proportion of data in train
training<-adult[trainIndex,]
validate<-adult[-trainIndex,]
library(rpart)
# Create the classification tree model
tree.model <- rpart(class ~ ., data = training)
# Predict the response variable for the validation set
tree.predictions <- predict(tree.model, newdata = validate)
# Convert the predictions to a factor
tree.predictions <- as.factor(tree.predictions)
# Confusion Matrix
cm <- table(tree.predictions, validate$class)
cm
library(pROC)
#Calculate the accuracy, sensitivity, specificity, prevalence, PPV, NPV, and AUROC
accuracy <- (sum(diag(cm)) / sum(cm)) * 100
sensitivity = cm[1, 1] / sum(cm[1, ])
specificity = cm[2, 2] / sum(cm[2, ])
prevalence = sum(cm[1, ]) / nrow(validate)
ppv = cm[1, 1] / sum(cm[, 1])
npv = cm[2, 2] / sum(cm[, 2])
auc <- auc(validate$class, as.numeric(tree.predictions))
#Print the results
print(paste("Accuracy:", accuracy, "%"))
print(paste("Sensitivity:", sensitivity))
print(paste("Specificity:", specificity))
print(paste("Prevalence:", prevalence))
print(paste("PPV:", ppv))
print(paste("NPV:", npv))
print(paste("AUROC:", auc))
library(pROC)
# Create the ROC curve
roc <- plot.roc(validate$Class, tree.predictions)
library(pROC)
# Convert tree predictions to numeric (probabilities)
tree.predictions_numeric <- as.numeric(tree.predictions)
# Create the ROC curve
roc_curve <- roc(validate$class, tree.predictions_numeric)
# Calculate AUROC
auc_value <- auc(roc_curve)
# Print the AUROC value
print(paste("AUROC:", auc_value))
roc_curve
library(pROC)
# Convert tree predictions to numeric (probabilities)
tree.predictions_numeric <- as.numeric(tree.predictions)
# Create the ROC curve
roc_curve <- roc(validate$class, tree.predictions_numeric)
roc_curve
# Plot the ROC curve
plot(roc_curve, print.auc = TRUE, main = "ROC Curve", auc.polygon = TRUE, grid = TRUE)
library(pROC)
# Convert tree predictions to numeric (probabilities)
tree.predictions_numeric <- as.numeric(tree.predictions)
# Create the ROC curve
roc_curve <- roc(validate$class, tree.predictions_numeric)
# Plot the ROC curve
plot(roc_curve, print.auc = TRUE, main = "ROC Curve", auc.polygon = TRUE, grid = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(pROC)
# Convert lda predictions to numeric (probabilities)
lda.predictions_numeric <- as.numeric(lda.predictions)
# Create the ROC curve
roc_curve <- roc(validate$class, lda.predictions_numeric)
# Plot the ROC curve
plot(roc_curve, print.auc = TRUE, main = "ROC Curve", auc.polygon = TRUE, grid = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Install the necessary packages
install.packages(c("dplyr", "tidyr", "glmnet", "pROC", "MASS", "car", "polynom", "interactions", "corrplot", "ggplot2", "ggthemes", "ResourceSeelction", "caret", "rpart"))
# Load the required libraries
library(dplyr)
library(tidyr)
library(glmnet)
library(caret)
library(pROC)
library(MASS)
library(car)
library(polynom)
library(interactions)
install.packages(c("dplyr", "tidyr", "glmnet", "pROC", "MASS", "car", "polynom", "interactions", "corrplot", "ggplot2", "ggthemes", "ResourceSeelction", "caret", "rpart"))
install.packages("interactions")
knitr::opts_chunk$set(echo = TRUE)
# LDA model
lda.model <- lda(class_factor~ age + education + marital_status + occupation + relationship + race + sex + hours_per_week + native_country, data = train)
knitr::opts_chunk$set(echo = TRUE)
# Install the necessary packages
install.packages(c("dplyr", "tidyr", "glmnet", "pROC", "MASS", "car", "polynom", "interactions", "corrplot", "ggplot2", "ggthemes", "ResourceSelection", "caret", "rpart"))
# Load the required libraries
library(dplyr)
library(tidyr)
library(glmnet)
library(caret)
library(pROC)
library(MASS)
library(car)
library(polynom)
library(interactions)
install.packages(c("dplyr", "tidyr", "glmnet", "pROC", "MASS", "car", "polynom", "interactions", "corrplot", "ggplot2", "ggthemes", "ResourceSelection", "caret", "rpart"))
library(interactions)
library(polynom)
library(interactions)
library(corrplot)
library(ggplot2)
library(ResourceSelection)
library(rpart)
# import data
data <- read.csv('https://raw.githubusercontent.com/willjones11/AppliedStatsProject2/main/adult.data', header=FALSE)
# rename columns
data <- rename(data, age = V1)
data <- rename(data, workclass = V2)
data <- rename(data, fnlwgt = V3)
data <- rename(data, education = V4)
data <- rename(data, education_num = V5)
data <- rename(data, marital_status = V6)
data <- rename(data, occupation = V7)
data <- rename(data, relationship = V8)
data <- rename(data, race = V9)
data <- rename(data, sex = V10)
data <- rename(data, capital_gain = V11)
data <- rename(data, capital_loss = V12)
data <- rename(data, hours_per_week = V13)
data <- rename(data, native_country = V14)
data <- rename(data, class = V15)
# Trim leading and trailing spaces from all character and factor columns -Oneal
data[] = lapply(data, function(x) if(is.character(x) | is.factor(x)) trimws(x) else x)
# Removing rows with '?' -Oneal
data = subset(data, !(workclass == "?" | education == "?" | occupation == "?" | native_country == "?"))
library(ggplot2)
library(dplyr)
library(ggthemes)
#breakdown of eductation
temp <- data.frame(data)
temp$education <- factor(temp$education, c('Preschool', '1st-4th', '5th-6th','7th-8th', '9th', '10th', '11th', '12th', 'HS-grad',
'Some-college', 'Assoc-voc', 'Assoc-acdm', 'Bachelors', 'Masters',
'Prof-school', 'Doctorate'))
temp %>% ggplot(aes(x=education)) +
geom_histogram(stat='count') +
scale_x_discrete(guide = guide_axis(angle = 45))
#breakdown of marital status
data %>% ggplot(aes(x= marital_status)) +
geom_histogram(stat='count') +
scale_x_discrete(guide = guide_axis(angle = 45))
#breakdown of sex
data %>% ggplot(aes(x=sex, fill=sex)) +
geom_histogram(stat='count')
ggsave('sex.png')
#breakdown of sex per pay
data %>% ggplot(aes(x=sex, fill=class)) +
geom_histogram(stat='count')
ggsave('SexperPay.png')
#breakdown of race
data %>% ggplot(aes(x=race)) +
geom_histogram(stat='count') +
scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle('Break down of Race') + theme_economist()
ggsave("Race.png")
#breakdown of race
data %>% ggplot(aes(x=race, colour=class, fill=class)) +
geom_histogram(stat='count') +
scale_x_discrete(guide = guide_axis(angle = 45)) +
ggtitle('Break down of Race') + theme_economist()
ggsave("RaceperPay.png")
#Breakdown of occupation status
data %>% ggplot(aes(x=workclass)) +
geom_histogram(stat='count') +
scale_x_discrete(guide = guide_axis(angle = 45))
#breakdown of age
data %>% ggplot(aes(x=age, fill=class)) +
geom_histogram(stat='bin')
ggsave("AgeperPay.png")
#breakdown of representation
data %>% ggplot(aes(x=fnlwgt)) +
geom_histogram(stat='bin', colour = 'black', fill='red')
#age vs. representation
data %>% ggplot(aes(x=age, y=fnlwgt)) + geom_point()
#age vs. representation per sex
data %>%  ggplot(aes(x=age, y=fnlwgt, colour = sex)) + geom_point()
#age vs. representation per race
data %>%  ggplot(aes(x=age, y=fnlwgt, colour = race)) + geom_point()
#breakdown of education per sex
data %>% ggplot(aes(x=education)) +
geom_histogram(stat='count') +
scale_x_discrete(guide = guide_axis(angle = 45))
ggsave('Education.png')
#breakdown of education per sex
data %>% ggplot(aes(x=education, fill=class)) +
geom_histogram(stat='count') +
scale_x_discrete(guide = guide_axis(angle = 45))
ggsave('EducationperPay.png')
#Breakdown of occupation status
data %>% ggplot(aes(x=workclass,fill=sex, colour=sex)) +
geom_histogram(stat='count') +
scale_x_discrete(guide = guide_axis(angle = 45))
# breakdown of over/under 50k
data %>% ggplot(aes(x=class)) +
geom_histogram(stat='count')
#breakdown of hours per week
data %>% ggplot(aes(x=hours_per_week)) + geom_histogram(stat='count')
#breakdown of hours per week by class
data %>% ggplot(aes(x=hours_per_week, fill=class)) +
geom_histogram(stat='count')
data$y <- ifelse(data$class == '>50K', 1, 0)
#Pay by age per sex
ggplot(data, aes(x=age, y=y, colour=sex)) + geom_point() +
geom_smooth(method="loess", linewidth=1)
#pay by age per marital status
ggplot(data, aes(x=age, y=y, colour=factor(marital_status))) + geom_point() +
geom_smooth(method="loess", linewidth=1) +
facet_wrap(~factor(marital_status))
#pay by age per race
ggplot(data, aes(x=fnlwgt, y=y, colour=factor(race))) + geom_point() +
geom_smooth(method="loess", linewidth=1) +
facet_wrap(~factor(race))
#pay by age per workclass
ggplot(data, aes(x=age, y=y, colour=factor(workclass))) + geom_point() +
geom_smooth(method="loess", linewidth=1) +
facet_wrap(~factor(workclass))
#pay by age per state
ggplot(data, aes(x=age, y=y, colour=factor(native_country))) + geom_point() +
geom_smooth(method="loess", linewidth=1) +
facet_wrap(~factor(native_country))
#splitting the data into test/train split
data$class_factor <- factor(ifelse(data$class == '>50K', "Yes", "No"))
# Define the columns to be treated as factors
factor_columns <-  c("workclass", "education", "marital_status", "occupation", "relationship", "race", "sex", "native_country")
print(data[factor_columns])
# Convert these columns to factors
data[factor_columns] <- lapply(data[factor_columns], factor)
set.seed(123)
trainIndex <- createDataPartition(data$class, p=.7, list=F)
train <- data[trainIndex,]
test <- data[-trainIndex,]
# LDA model
lda.model <- lda(class_factor~ age + education + marital_status + occupation + relationship + race + sex + hours_per_week + native_country, data = train)
# Predict the response variable for the test set
lda.predictions <- predict(lda.model, newdata = test, type="class")$class
length(lda.predictions)
# Confusion Matrix
cm <- confusionMatrix(lda.predictions, test$class_factor)
cm
auc <- pROC::auc(test$class_factor, as.numeric(lda.predictions))
# Calculate the AUROC using predicted class labels
roc_auc_lda <- roc(response = test$class_factor, predictor = as.numeric(lda.predictions))$auc
roc_auc
# LDA model
lda.model <- lda(class_factor~ age + education + marital_status + occupation + relationship + race + sex + hours_per_week + native_country, data = train)
# Predict the response variable for the test set
lda.predictions <- predict(lda.model, newdata = test, type="class")$class
length(lda.predictions)
# Confusion Matrix
cm <- confusionMatrix(lda.predictions, test$class_factor)
cm
auc <- pROC::auc(test$class_factor, as.numeric(lda.predictions))
# Calculate the AUROC using predicted class labels
roc_auc_lda <- roc(response = test$class_factor, predictor = as.numeric(lda.predictions))$auc
roc_auc_lda
roc_curve <- roc(response = test$class_factor, predictor = as.numeric(lda.predictions))
# Plot the ROC curve
plot(roc_curve, print.auc = TRUE, main = "ROC Curve", auc.polygon = TRUE, grid = TRUE)
#Assessing the goodness of fit
hoslem.test(train$class_factor, fitted(lda.model))
# LDA model
lda.model <- lda(class_factor~ age + education + marital_status + occupation + relationship + race + sex + hours_per_week + native_country, data = train)
# Predict the response variable for the test set
lda.predictions <- predict(lda.model, newdata = test, type="class")$class
length(lda.predictions)
lda.predictions1 <- predict(lda.model, newdata = test, type = "response")
predicted_probs_positive <- lda.predictions1$Yes
# Confusion Matrix
cm <- confusionMatrix(lda.predictions, test$class_factor)
cm
auc <- pROC::auc(test$class_factor, as.numeric(lda.predictions))
# Calculate the AUROC using predicted class labels
roc_auc_lda <- roc(response = test$class_factor, predictor = as.numeric(lda.predictions))$auc
roc_auc_lda
roc_curve <- roc(response = test$class_factor, predictor = as.numeric(lda.predictions))
# Plot the ROC curve
plot(roc_curve, print.auc = TRUE, main = "ROC Curve", auc.polygon = TRUE, grid = TRUE)
#Assessing the goodness of fit
hoslem_result <- hoslem.test(test$class_factor, predicted_probs_positive)
# LDA model
lda.model <- lda(class_factor~ age + education + marital_status + occupation + relationship + race + sex + hours_per_week + native_country, data = train)
# Predict the response variable for the test set
lda.predictions <- predict(lda.model, newdata = test, type="class")$class
length(lda.predictions)
lda.predictions1 <- predict(lda.model, newdata = test, type = "response")
predicted_probs_positive <- lda.predictions1$Yes
# Confusion Matrix
cm <- confusionMatrix(lda.predictions, test$class_factor)
cm
auc <- pROC::auc(test$class_factor, as.numeric(lda.predictions))
# Calculate the AUROC using predicted class labels
roc_auc_lda <- roc(response = test$class_factor, predictor = as.numeric(lda.predictions))$auc
roc_auc_lda
roc_curve <- roc(response = test$class_factor, predictor = as.numeric(lda.predictions))
# Plot the ROC curve
plot(roc_curve, print.auc = TRUE, main = "ROC Curve", auc.polygon = TRUE, grid = TRUE)
#Assessing the goodness of fit
hoslem_result <- hoslem.test(test$class_factor, as.numeric(predicted_probs_positive))
